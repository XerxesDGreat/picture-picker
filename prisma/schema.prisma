// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  createdAlbums Album[]   @relation("AlbumCreator")
  sharedAlbums  Album[]   @relation("AlbumSharedWith")
  votes         Vote[]
  photos        Photo[]
}

model Album {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String
  creator     User     @relation("AlbumCreator", fields: [creatorId], references: [id])
  sharedWith  User[]   @relation("AlbumSharedWith")
  photos      Photo[]
}

model Photo {
  id          String   @id @default(cuid())
  title       String
  url         String
  objectName  String   // MinIO object name for file management
  width       Int      // Adding width field
  height      Int      // Adding height field
  captureDate DateTime? // Original photo capture date from EXIF
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  albumId     String
  album       Album    @relation(fields: [albumId], references: [id])
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id])
  votes       Vote[]

  @@index([albumId])
  @@index([creatorId])
}

model Vote {
  id        String   @id @default(cuid())
  value     Int      // 1 for upvote, -1 for downvote
  userId    String
  photoId   String
  user      User     @relation(fields: [userId], references: [id])
  photo     Photo    @relation(fields: [photoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, photoId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
